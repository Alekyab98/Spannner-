import os
import csv
from datetime import datetime, timedelta
from google.cloud import spanner

# üîê Set your service account key path (use forward slashes or double backslashes)
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "C:/Users/bilalal/Documents/gcp_keys/sa-dev-gudv-app-dtwndo-0.json"

# Cloud Spanner settings
project = 'vz-it-np-jpuv-dev-anpdo-0'
instance_id = 'anp-spanner-instance'

# Input and output files
input_csv = 'input.csv'
output_csv = 'results.csv'

# Initialize Spanner client
client = spanner.Client(project=project)
instance = client.instance(instance_id)

# Helper function to loop through date range
def daterange(start_date, end_date):
    for n in range((end_date - start_date).days + 1):
        yield start_date + timedelta(n)

# Create output CSV
with open(output_csv, mode='w', newline='') as outfile:
    writer = csv.writer(outfile)
    writer.writerow(["table_name", "filter_column", "date", "result"])

    # Read input CSV
    with open(input_csv, mode='r') as infile:
        reader = csv.DictReader(infile)
        for row in reader:
            table = row['table_name'].strip()
            column = row['filter_column'].strip()
            database_id = row['database'].strip()
            start_date = datetime.strptime(row['start_date'].strip(), "%Y-%m-%d").date()
            end_date = datetime.strptime(row['end_date'].strip(), "%Y-%m-%d").date()

            database = instance.database(database_id)

            with database.snapshot() as snapshot:
                for date in daterange(start_date, end_date):
                    date_str = date.strftime("%Y-%m-%d")
                    query = f"""
                        SELECT {column}
                        FROM {table}
                        WHERE {column} = '{date_str}'
                        LIMIT 1
                    """
                    try:
                        results = list(snapshot.execute_sql(query))
                        result = "YES" if results else "NO"
                    except Exception as e:
                        result = f"ERROR: {str(e)}"
                    writer.writerow([table, column, date_str, result])
